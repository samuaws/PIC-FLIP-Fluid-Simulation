#pragma kernel ApplyViscosity

int gridResolution;
float cellSize;
float timeStep;
float viscosity;

RWStructuredBuffer<float3> velocities;
RWStructuredBuffer<float> mass;

// Define GetLaplacian function
float3 GetLaplacian(RWStructuredBuffer<float3> field, uint3 id)
{
    return field[id.x + 1 + id.y * gridResolution + id.z * gridResolution * gridResolution] +
           field[id.x - 1 + id.y * gridResolution + id.z * gridResolution * gridResolution] +
           field[id.x + (id.y + 1) * gridResolution + id.z * gridResolution * gridResolution] +
           field[id.x + (id.y - 1) * gridResolution + id.z * gridResolution * gridResolution] +
           field[id.x + id.y * gridResolution + (id.z + 1) * gridResolution * gridResolution] +
           field[id.x + id.y * gridResolution + (id.z - 1) * gridResolution * gridResolution] -
           6.0f * field[id.x + id.y * gridResolution + id.z * gridResolution * gridResolution];
}

[numthreads(8, 8, 8)]
void ApplyViscosity(uint3 id : SV_DispatchThreadID)
{
    int index = id.x + id.y * gridResolution + id.z * gridResolution * gridResolution;

    float3 velocity = velocities[index];

    // Compute the Laplacian of the velocity field
    float3 laplacian = GetLaplacian(velocities, id);

    // Apply viscosity force
    float3 viscosityForce = viscosity * laplacian;

    // Update velocity
    velocities[index] += viscosityForce * timeStep;
}
